-> build your first flask app lesson  
   -> what are urls and routes?  

-> introduction  
   -> in this lesson, you will dive deeper into two fundamental concepts in web development: urls and routes, which are core to how flask operates  
   -> understanding urls and routes is essential for developing flask applications as they enable flask to map incoming web requests to specific python functions, allowing dynamic responses to user actions  
   -> this lesson will explore how these components interact in the flask web framework to ensure requests are routed to the correct view functions  

-> what is a url?  
   -> url stands for uniform resource locator, commonly known as a web address  
   -> it specifies the location of a resource (like a webpage or image) on the internet  
   -> a url is broken down into several parts:  
      -> protocol: indicates the method used to transfer data, like "http://" or "https://"  
      -> host: the domain name or ip address of the server hosting the resource, like "example.com"  
      -> path: specifies the exact location of the resource on the server, like "/about", "/contact", or "/images/pic.jpg"  
      -> query parameters (optional): used to send additional data to the server, for example: "?id=123&name=john"  
      -> fragment (optional): refers to a specific section within a resource, e.g., "#section1"  

-> requests and responses  
   -> when a user enters a url into their browser, a request is sent to the web server  
   -> the request specifies which resource the user wants, as identified by the path in the url  
   -> the web server processes the request and returns a response containing the requested resource or a related message (e.g., error or redirect)  
   -> for example, a request to "http://example.com/about" asks for the "about" page  
   -> the server handles the request by calling the appropriate view function, processes it, and sends back the response in the form of html, json, or other types of data  

-> paths  
   -> the path in the url is crucial as it tells the server which resource or page the user is requesting  
   -> a path is everything after the domain name in the url:  
      -> example 1: "http://example.com/about" -> "/about" is the path  
      -> example 2: "http://example.com/" -> "/" represents the homepage or root  
   -> in flask, the path is used to map to a view function, which contains the logic to generate the correct response  
   -> the root path ("/") is usually mapped to the main homepage of the application, and other paths (e.g., "/about") are used for other pages or resources  
   -> flask's path handling is flexible, allowing dynamic values to be passed in paths (like "/user/<username>")  

-> routes and view functions in flask  
   -> a route in flask defines the mapping between a url path and a function (view function) that will handle the request for that path  
   -> a route tells flask which python function to call when a user visits a specific url  
   -> in flask, routes are often defined using decorators, which allow functions to be "decorated" with a mapping to a url  
   -> the syntax for defining routes is @app.route(), followed by the url path and the function to handle the request:  
     
python  
     @app.route('/about')  
     def about_us():  
         return "<p>a blurb about this website</p>"
  
   -> in the above example, the @app.route('/about') decorator maps the "/about" path to the "about_us" function  
   -> when a user visits "http://localhost:5000/about", flask calls the "about_us" function and returns the html content as a response  
   -> you can also use the app.add_url_rule() method to add routes programmatically:  
     
python  
     app.add_url_rule('/about', 'about_us', about_us)
  
   -> this method takes three arguments: the url path, the name for the route (endpoint), and the view function that should be called for that route  
   -> this is useful when you want to add routes dynamically, especially in larger applications  

-> endpoint names  
   -> an endpoint name refers to a symbolic name that identifies the view function for a given route  
   -> flask automatically assigns the name of the view function as the endpoint, but you can also manually set the endpoint name using the endpoint argument in app.add_url_rule()  
   -> endpoint names are helpful for generating urls dynamically, especially for things like redirects or generating links in templates  
   -> example:  
     
python  
     app.add_url_rule('/about', endpoint='about_us', view_func=about_us)
  
   -> by explicitly setting the endpoint name, you can refer to this route later in your application, making the code more maintainable and flexible  
   -> for instance, if you need to generate the url for this route elsewhere in your application, you can use `url_for('about_us')` to get the corresponding url for the route  
   -> this helps avoid hardcoding urls throughout your application  

-> html responses  
   -> in flask, view functions often return html content, which the browser renders as a webpage  
   -> for example, in the function about_us(), the string "<p>a blurb about this website</p>" is returned, and the browser will display the html content within the tags  
   -> flask makes it easy to generate dynamic html content by using jinja templates, which allow you to insert variables and control structures into the html  
   -> jinja templating will be covered in a later lesson, but for now, it's important to understand that flask can send complex, dynamic content to the browser through view functions  

-> summary: what are urls and routes?  
   -> a url (uniform resource locator) is a web address used to locate resources on the internet  
   -> the structure of a url includes:  
      -> protocol (e.g., "http://", "https://")  
      -> host (e.g., domain name or ip address)  
      -> path (e.g., "/about", "/contact")  
   -> in flask, routes map url paths to view functions, allowing flask to know which function to execute when a user visits a specific path  
   -> you can define routes using the @app.route() decorator, or by using app.add_url_rule() to add routes programmatically  
   -> when a user visits a url, flask executes the associated view function and returns a response, often html, to the browser  

-> example code for /about route  
   
python  
   @app.route('/about')  
   def about_us():  
       return "<p>a blurb about this website</p>"  
-> when a user navigates to "http://localhost:5000/about", flask will return the response:  
"<p>a blurb about this website</p>"
