-> flask templates, jinja, and you lesson  
   -> how to use flask-bootstrap in your flask and jinja project  

-> introduction  
   -> this lesson explains how to install and use flask-bootstrap in your python-flask projects  
   -> it walks through how to integrate the bootstrap framework into flask templates to make web pages look professional with minimal effort  
   -> flask-bootstrap is a powerful tool that helps with ui components, providing pre-built, responsive templates  

-> what is bootstrap?  
   -> bootstrap is an open-source framework for web development, originally created by twitter  
   -> it provides a collection of pre-styled ui components like buttons, forms, navigation bars, and grids that are compatible with modern browsers on both desktop and mobile devices  
   -> bootstrap works mainly through css and javascript files to style html content  
   -> flask-bootstrap is an extension that simplifies adding bootstrap to flask apps  
   -> bootstrap helps save time by allowing developers to create aesthetically pleasing websites quickly with responsive design that adapts to various screen sizes  

-> how to use flask-bootstrap  
   -> flask-bootstrap helps flask developers integrate bootstrap into their apps without manually adding the required css and javascript files  
   -> to start using flask-bootstrap, you need to install the extension via pip:  
     ```  
     $ pip install flask-bootstrap  
     ```  
   -> after installation, you need to initialise flask-bootstrap by creating a flask app and passing it to the `bootstrap` instance:  
     ```python  
     from flask_bootstrap import bootstrap  
     app = flask(__name__)  
     bootstrap = bootstrap(app)  
     ```  
   -> extensions must be initialised in the same instance as the flask app to work correctly  
   -> the `bootstrap(app)` statement links the flask-bootstrap extension with the flask application, allowing you to use all the bootstrap features  

-> flask-bootstrap base template  
   -> flask-bootstrap provides a built-in base template (`bootstrap/base.html`) that includes all the necessary bootstrap files (css and javascript)  
   -> by extending this base template, you don't need to manually add bootstrap's styles and scripts to your templates  
   -> this template handles all the integration and styling for you  
   -> you can extend the `base.html` template in your app's templates by adding the following at the top of your html file:  
     ```  
     {% extends "bootstrap/base.html" %}  
     ```  
   -> this line tells flask to use the bootstrap template as the base for the current template  

-> flask-bootstrap template blocks  
   -> the `bootstrap/base.html` file contains several template blocks that you can override to customise the content of your pages  
   -> these blocks serve as placeholders for various parts of your page (e.g., title, navbar, content)  
   -> common template blocks provided by flask-bootstrap:  
     - `block title`: the block that defines the page title in the `<head>` section  
     - `block navbar`: the block that defines the navigation bar  
     - `block content`: the block that contains the main content of the page  

-> example code for base template  
   -> a typical base template using flask-bootstrap might look like this:  
     ```  
     {% extends "bootstrap/base.html" %}  
     {% block title %}{{ super() }}ragtime -{% endblock %}  
     {% block navbar %}  
     <div class="navbar navbar-default" role="navigation">  
     <div class="container">  
     <div class="navbar-header">  
     <button type="button" class="navbar-toggle collapsed">  
     <span class="sr-only">toggle navigation</span>  
     <span class="icon-bar"></span>  
     <span class="icon-bar"></span>  
     <span class="icon-bar"></span>  
     </button>  
     <a class="navbar-brand" href="/">ragtime</a>  
     </div>  
     <div class="collapse navbar-collapse" id="bs-example-navbar-collapse">  
     <ul class="nav navbar-nav">  
     <li><a href="/">home</a></li>  
     </ul>  
     </div>  
     </div>  
     </div>  
     {% endblock %}  
     {% block content %}  
     <div class="container">  
     {% block page_content %}{% endblock %}  
     </div>  
     {% endblock %}  
     ```  
   -> the above code does the following:  
     - the `extends "bootstrap/base.html"` makes the template inherit all the necessary bootstrap code  
     - the `block title` overrides the title tag to append "ragtime -" to the default title  
     - the `block navbar` overrides the default navigation bar and customises it with a "ragtime" brand link and a "home" link  
     - the `block content` provides a container where the main page content will be placed  

-> modifying templates  
   -> you can customise templates further by overriding blocks like `title`, `navbar`, and `content`  
   -> for example, in a user profile page, you could modify the `title` block to display the user's name dynamically  
   -> here's an example template (`user.html`) that extends the base template and customises the content:  
     ```  
     {% extends "base.html" %}  
     {% block title %}{{ super() }}{% if username %}user {{ username }}{% endif %}{% endblock %}  
     {% block navbar %}{{ super() }}{% endblock %}  
     {% block content %}  
     <h1>  
     {% if username %}  
     hello, {{ username }}!  
     {% else %}  
     hello, anonymous!  
     {% endif %}  
     </h1>  
     {% endblock %}  
     ```  
   -> in this template:  
     - the `title` block conditionally displays the user's name if a `username` variable is passed to the template  
     - the `navbar` block is overridden using `{{ super() }}` to include the original navbar content  
     - the `content` block conditionally displays a personalised greeting: "hello, [username]!" or "hello, anonymous!" depending on whether the `username` variable is set  

-> summary  
   -> flask-bootstrap is an extension that simplifies the integration of bootstrap into flask applications  
   -> it provides a pre-styled base template that includes bootstrap's css and javascript files, saving time for developers  
   -> you can extend this base template and override its blocks (like `title`, `navbar`, and `content`) to customise your pages  
   -> this approach helps avoid repetitive code and allows for easy styling of web pages with minimal effort  
   -> by using jinja template blocks, you can dynamically insert content into specific sections of your pages (like the title or user-specific information)  
