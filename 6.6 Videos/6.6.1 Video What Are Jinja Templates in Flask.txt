-> templates in flask with jinja  
    -> what is a template  
        -> a tool that allows developers to reuse most parts of a webpage while modifying specific elements  
        -> provides a way to handle dynamic content within static html structure  
        -> example: dynamic greeting for a user logging in (e.g., "hello, user tim")  
        -> template contains static text and placeholders for dynamic parts (e.g., user’s name)  
        -> these placeholders are replaced during rendering  

    -> purpose of a template  
        -> reuse common html code for different pages while only altering specific parts dynamically  
        -> helps maintain consistency across web pages while allowing customisation for dynamic content  
        -> dynamically render values into placeholders using data passed from view functions  

    -> how templates are used in flask  
        -> view function passes data (e.g., user’s name) to a template  
        -> flask's render_template function is used to load the template from the templates folder  
        -> template files are stored in a directory called `templates` within the project structure  
        -> flask automatically searches the templates folder to find the requested template when rendering  
        -> templates typically use html mixed with jinja syntax (e.g., `{{ variable_name }}` for placeholders)  
        -> example: `render_template('greeting.html', username=user_name)` in view function  
        -> when a route is accessed, flask uses the view function to dynamically generate the content based on the passed data, rendering it into an html template  

    -> template rendering in flask  
        -> flask loads and processes the template when the route is triggered  
        -> data passed to templates is used to replace placeholders, resulting in dynamic content being displayed to the user  
        -> template rendering occurs automatically through flask’s `render_template()` function, which looks for templates in the `templates` directory  

    -> importance of jinja  
        -> jinja is the templating engine used in flask to enhance html templates  
        -> while templates in flask provide basic static html structure, jinja adds powerful features for dynamic rendering and control flow  
        -> jinja allows dynamic variables (e.g., user’s name) to be inserted into templates seamlessly  
        -> jinja’s features include:  
            -> dynamic variable rendering (e.g., `{{ username }}` for dynamic user data)  
            -> conditional logic (e.g., `if` statements to control which content to show)  
            -> looping through data (e.g., displaying a list of items dynamically using `for` loops)  
            -> reusable components via macros (reusable html code snippets)  
            -> template inheritance for maintaining a consistent layout  

    -> features of jinja  
        -> conditional logic: use `{% if condition %} ... {% endif %}` to show different content based on conditions  
            -> example: showing a special greeting if the user is logged in or offering a different view for guests  
        -> loops: use `{% for item in list %} ... {% endfor %}` to loop through a collection of items (e.g., display a list of products)  
        -> macros: create reusable html snippets using `{% macro name() %} ... {% endmacro %}`  
            -> useful for reducing repetitive html and making the code cleaner and easier to maintain  
        -> template inheritance: share common layout between different pages by creating a base template  
            -> the base template might contain common elements (e.g., header, footer, navigation bar)  
            -> other templates can inherit from this base template and override specific blocks (e.g., content)  
            -> example: `{% extends 'base.html' %}` and `{% block content %} ... {% endblock %}` to customise sections  

    -> template inheritance in flask  
        -> base templates allow for centralised changes in shared elements across all pages (e.g., header, footer, styles)  
        -> other templates can extend this base template and redefine content sections as needed  
        -> this promotes code reuse and ensures consistency across pages, reducing repetitive html code  
        -> example: a base template might include a `<nav>` element, and all other templates would extend it and focus only on the content  

    -> summary of flask templates and jinja  
        -> templates in flask are used to dynamically insert content into static html  
        -> jinja is the templating engine that enhances this functionality with conditional logic, loops, macros, and inheritance  
        -> templates enable dynamic web applications, allowing developers to efficiently manage repetitive content while focusing on custom sections  
        -> jinja makes templates more powerful by adding logic and reusability to html, providing a clean and scalable solution for rendering dynamic pages  
