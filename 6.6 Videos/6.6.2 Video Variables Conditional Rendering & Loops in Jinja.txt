-> creating and using templates in flask  
    -> overview of the demo  
        -> demonstrating how to create and use templates in flask through a code demo  
        -> topics covered: rendering placeholder variables, conditional rendering, and loops in templates  
        -> these skills are essential for developing a strong foundation in template creation  
        -> useful for future parts of the course  

    -> preparation  
        -> make a copy of your flask project folder and rename it to "template_examples"  
        -> install two visual studio code extensions:  
            -> "better jinja"  
            -> "jinja"  
        -> these extensions enhance the coding experience  

    -> creating the basic user route  
        -> create a route with the path `/user`  
        -> define a view function for this route  
        -> previously returned plain strings, now returning a template  
        -> flask requires a `templates` folder to store all your template files  
        -> create the `templates` folder in your project directory  
        -> add a new html file called `user.html`  
        -> write a simple greeting message in the html file (e.g., "hello, user!")  

    -> rendering the template  
        -> in your python file, import `render_template` function from flask  
        -> link the view function with the template using `render_template`  
        -> update the view function to return a response handled by `render_template`  
        -> specify the `user.html` file as the template to render  
        -> launch the flask app and navigate to `/user`  
        -> the greeting message will be displayed on the webpage  

    -> making the route dynamic  
        -> modify the route to `/user/<username>`  
        -> update the view function to pass the `username` variable to the template  
        -> flask sends variables to jinja as keyword arguments  
        -> add `username` as a keyword argument in the view function  
        -> set its value to the corresponding part of the url path  
        -> in the `user.html` template, add a placeholder using double curly braces (`{{ username }}`)  
        -> this placeholder tells jinja to dynamically render the value passed from flask  
        -> test the route by entering a username in the path (e.g., `/user/tim`)  
        -> the webpage will display a personalised greeting (e.g., "hello, tim!")  

    -> conditional rendering in templates  
        -> conditional rendering allows you to display specific content based on variables  
        -> example: check if a user is an admin and display additional options  
        -> jinja's syntax for conditions is simple and enhances template flexibility  

    -> using loops in templates  
        -> loops allow you to render repetitive elements like lists or tables dynamically  
        -> example: render a list of items or a table of data  
        -> loops combined with placeholders and conditions make templates powerful and efficient  

    -> conclusion  
        -> by combining placeholders, conditions, and loops, templates become versatile tools for web development  
        -> with these foundational skills, you are equipped to build dynamic flask applications  
