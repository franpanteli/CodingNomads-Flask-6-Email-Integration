-> installing initial bootstrap in flask and creating base templates  
   -> setting up flask with bootstrap  
        -> begin by ensuring that your virtual environment is activated in your terminal (use `source venv/bin/activate` for unix-based systems or `venv\scripts\activate` for windows)  
        -> install flask-bootstrap to integrate bootstrap into your flask app. this can be done by running:  
            ```
            pip install flask-bootstrap
            ```  
        -> once flask-bootstrap is installed, import the `bootstrap` class from the `flask_bootstrap` package:  
            ```python  
            from flask_bootstrap import bootstrap  
            ```  
        -> initialise the `bootstrap` object by passing your flask app instance into it:  
            ```python  
            app = flask(__name__)  
            bootstrap(app)  
            ```  
        -> this integrates the bootstrap css framework into your flask app, enabling you to use bootstrap’s predefined styles and components across your templates.  
        -> by including flask-bootstrap, you don't have to manually add the bootstrap css links to every template; it automatically includes them.  

    -> creating the templates folder  
        -> create a `templates` folder in the root of your flask project directory. flask will automatically look for html files in this directory when rendering templates.  
        -> inside the `templates` folder, create the `base.html` file. this file will contain the common structure and layout for all your pages.  
        -> the `base.html` file will serve as a foundation that other templates can extend to maintain consistency across your app.  

    -> base template setup  
        -> the `base.html` file is your starting point and will include html structure along with bootstrap’s default styling and layout.  
        -> in `base.html`, set up the html structure:  
            - the `<html>` tag should wrap the entire page.  
            - inside the `<head>` tag, link to the bootstrap css file from the bootstrap cdn:  
                ```html  
                <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">  
                ```  
            - inside the `<body>` tag, define reusable sections such as navigation bars, footers, and placeholders for dynamic content.  

    -> adding blocks for custom content  
        -> bootstrap provides predefined blocks, which you can leverage and extend in your templates. a block is a section of content that can be overridden in child templates.  
        -> in the `base.html` template, create `block` tags for the title and content that can be customised by any template that extends it:  
            ```html  
            <title>{% block title %}my application{% endblock %}</title>  
            <div class="container">  
                {% block content %}  
                {% endblock %}  
            </div>  
            ```  
        -> the `{% block %}` syntax defines sections that can be overridden in child templates. for example, the `{% block title %}` will allow different pages to have unique titles, while `{% block content %}` will define where the page content goes.  

    -> extending the base template  
        -> once the base template is defined, you can extend it in other templates such as `user.html`.  
        -> in `user.html`, use the `{% extends "base.html" %}` directive to inherit the structure and styles defined in `base.html`:  
            ```html  
            {% extends "base.html" %}  
            ```  
        -> after extending the base template, you can override the blocks defined in `base.html`. for instance, you can change the title for the user page and provide content specific to that page:  
            ```html  
            {% block title %}user profile{% endblock %}  
            {% block content %}  
                <h1>welcome, {{ username }}!</h1>  
            {% endblock %}  
            ```  
        -> the `{% block content %}` allows dynamic content (such as the username) to be inserted into the page, which will be displayed in the layout defined in `base.html`.  

    -> testing with flask app  
        -> once the `base.html` and `user.html` templates are set up, it’s time to run the flask app.  
        -> open your terminal, navigate to your project directory, and start the flask app by running:  
            ```
            flask run
            ```  
        -> this will start the flask development server. open your browser and visit the `user.html` route (e.g., `/user/<username>`) to see if the template is correctly inheriting from `base.html` and applying bootstrap styling.  
        -> the page should now have the bootstrap layout and any dynamic content you’ve defined, such as the username.  

    -> troubleshooting content rendering  
        -> if the greeting message doesn’t appear or if there are layout issues, check the following:  
            - ensure that the content is properly wrapped inside the `{% block content %}` section in `base.html`.  
            - make sure that the `username` variable is being passed correctly from your route to the template in the `render_template` function.  
            - verify that you're using the correct template file names (e.g., `user.html` should extend `base.html`, and you should be calling `render_template("user.html", username=username)`).  

    -> making conditional content display  
        -> in many cases, you may need to conditionally display content. for example, you might only want to show the username if it's defined.  
        -> use jinja conditionals to achieve this, similar to python’s `if` statements:  
            ```html  
            {% if username %}  
                <p>hello, {{ username }}!</p>  
            {% else %}  
                <p>welcome, guest!</p>  
            {% endif %}  
            ```  
        -> this checks if the `username` variable is defined and renders a personalised greeting if it is. otherwise, it renders a generic message for a guest.  

    -> final testing  
        -> after setting up the base template and extending it with a user template, test the app again to verify that the content is displayed properly.  
        -> refresh your browser and navigate to the `/user/<username>` route. if the username is defined, you should see a personalised greeting. if the username is not defined, the "welcome, guest!" message will appear.  
        -> make sure the bootstrap layout is applied consistently across different pages, and the conditional rendering works as expected.  

    -> conclusion  
        -> in this video, you learned how to integrate bootstrap with flask by using flask-bootstrap to automatically include bootstrap’s css.  
        -> you created a base template (`base.html`) that includes common page elements like the title, navigation, and content areas, and then extended this template in a user-specific template (`user.html`).  
        -> you also explored how to use jinja’s `{% block %}` syntax to define reusable sections and override them in child templates.  
        -> by following these steps, you can build a consistent layout across your flask application with minimal redundancy while using bootstrap’s responsive design.
